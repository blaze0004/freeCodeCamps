{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal\\\\projects\\\\freecodecamps\\\\front-end-libraries-projects\\\\build-a-javascript-calculator\\\\src\\\\component\\\\Calculator\\\\Calculator.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Utils } from \"../../shared/Utils\";\nimport \"./Calculator.css\";\nimport DisplayPanel from \"./DisplayPanel/DisplayPanel\";\nimport InputPanel from \"./InputPanel/InputPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n\n  const handleClick = value => {\n    if (Utils.isCancel(value)) {\n      setInput(\"0\");\n      setResult(\"\");\n    } else if (Utils.isNumber(value)) {\n      setInput(prev => prev.length === 1 && prev === \"0\" ? value : prev + value);\n    } else if (Utils.isDecimal(value) && !Utils.MATH_OPERATORS.some(x => input.includes(x)) && !input.includes(\".\")) {\n      setInput(prev => prev + value);\n    } else if (Utils.isMathOperator(value)) {\n      setInput(prevValue => {\n        const isPreviousAlsoMathOperator = Utils.isMathOperator(prevValue[prevValue.length - 1]);\n\n        if (isPreviousAlsoMathOperator) {\n          const newInput = prevValue.substring(0, prevValue.length - 1) + value;\n          return newInput;\n        } else {\n          return prevValue + value;\n        }\n      });\n    } else if (Utils.isEqualOperator(value)) {\n      let validInput = input;\n      const isLastInputIsMathOperator = Utils.isMathOperator(input[input.length - 1]);\n\n      if (isLastInputIsMathOperator) {\n        validInput = input.substring(0, input.length - 1);\n        setInput(validInput);\n      }\n\n      setResult(validInput + \"=\" + Utils.calculate(validInput));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayPanel, {\n      input: input,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputPanel, {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calculator, \"kJTwZaderP+onKByMZQMZU4B9ag=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["D:/Personal/projects/freecodecamps/front-end-libraries-projects/build-a-javascript-calculator/src/component/Calculator/Calculator.tsx"],"names":["useState","Utils","DisplayPanel","InputPanel","Calculator","result","setResult","input","setInput","handleClick","value","isCancel","isNumber","prev","length","isDecimal","MATH_OPERATORS","some","x","includes","isMathOperator","prevValue","isPreviousAlsoMathOperator","newInput","substring","isEqualOperator","validInput","isLastInputIsMathOperator","calculate"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { Utils } from \"../../shared/Utils\";\r\nimport \"./Calculator.css\";\r\nimport DisplayPanel from \"./DisplayPanel/DisplayPanel\";\r\nimport InputPanel from \"./InputPanel/InputPanel\";\r\n\r\nconst Calculator: React.FC = () => {\r\n  const [result, setResult] = useState(\"\");\r\n  const [input, setInput] = useState(\"0\");\r\n\r\n  const handleClick = (value: string) => {\r\n    if (Utils.isCancel(value)) {\r\n      setInput(\"0\");\r\n      setResult(\"\");\r\n    } else if (Utils.isNumber(value)) {\r\n      setInput((prev) =>\r\n        prev.length === 1 && prev === \"0\" ? value : prev + value\r\n      );\r\n    } else if (\r\n      Utils.isDecimal(value) &&\r\n      (!Utils.MATH_OPERATORS.some((x) => input.includes(x)) && !input.includes(\".\"))\r\n    ) {\r\n      setInput((prev) => prev + value);\r\n    } else if (Utils.isMathOperator(value)) {\r\n      setInput((prevValue) => {\r\n        const isPreviousAlsoMathOperator = Utils.isMathOperator(\r\n          prevValue[prevValue.length - 1]\r\n        );\r\n        if (isPreviousAlsoMathOperator) {\r\n          const newInput = prevValue.substring(0, prevValue.length - 1) + value;\r\n          return newInput;\r\n        } else {\r\n          return prevValue + value;\r\n        }\r\n      });\r\n    } else if (Utils.isEqualOperator(value)) {\r\n      let validInput = input;\r\n      const isLastInputIsMathOperator = Utils.isMathOperator(\r\n        input[input.length - 1]\r\n      );\r\n      if (isLastInputIsMathOperator) {\r\n        validInput = input.substring(0, input.length - 1);\r\n        setInput(validInput);\r\n      }\r\n      setResult(validInput + \"=\" + Utils.calculate(validInput));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <DisplayPanel input={input} result={result} />\r\n      <InputPanel onClick={handleClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n"]},"metadata":{},"sourceType":"module"}