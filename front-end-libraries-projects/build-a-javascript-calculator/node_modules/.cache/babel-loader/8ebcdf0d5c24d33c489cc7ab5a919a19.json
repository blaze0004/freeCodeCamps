{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal\\\\projects\\\\freecodecamps\\\\front-end-libraries-projects\\\\build-a-javascript-calculator\\\\src\\\\component\\\\Calculator\\\\Calculator.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Utils } from \"../../shared/Utils\";\nimport \"./Calculator.css\";\nimport DisplayPanel from \"./DisplayPanel/DisplayPanel\";\nimport InputPanel from \"./InputPanel/InputPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  const [results, setResults] = useState([]);\n  const [input, setInput] = useState(\"0\");\n  const [displayValue, setDisplayValue] = useState('');\n  const prevResult = useRef('');\n  const [isLastEqual, setisLastEqual] = useState(false);\n  useEffect(() => {\n    prevResult.current = results.length ? results[results.length - 1].split(\"=\")[1] : '0';\n    setInput(prevResult.current);\n  }, [results]);\n  useEffect(() => {\n    if (!isLastEqual) {\n      setDisplayValue(input);\n    }\n\n    isLastEqual && setisLastEqual(false);\n  }, [input, isLastEqual, setisLastEqual]);\n\n  const handleClick = value => {\n    if (Utils.isCancel(value)) {\n      setInput(\"0\");\n      setResults([]);\n    } else if (Utils.isNumber(value)) {\n      setInput(prev => prev.length === 1 && prev === \"0\" ? value : prev + value);\n    } else if (Utils.isDecimal(value)) {\n      const hasNoOperatorOrDecimal = !Utils.MATH_OPERATORS.some(x => input.includes(x)) && !input.includes(\".\");\n\n      if (hasNoOperatorOrDecimal) {\n        setInput(prev => prev + value);\n        return;\n      }\n\n      const lastIndexOfOperator = Math.max(...Utils.MATH_OPERATORS.map(x => input.lastIndexOf(x)));\n      const lastIndexOfDecimal = input.lastIndexOf(\".\");\n\n      if (lastIndexOfDecimal < lastIndexOfOperator) {\n        setInput(prev => prev + value);\n        return;\n      }\n    } else if (Utils.isMathOperator(value)) {\n      setInput(prevValue => {\n        const isPreviousAlsoMathOperator = Utils.isMathOperator(prevValue[prevValue.length - 1]);\n        const isSubtractOperator = value === \"-\";\n\n        if (isPreviousAlsoMathOperator && !isSubtractOperator) {\n          let lastIndex = prevValue.length - 1;\n          const reversedValueArr = prevValue.split('').reverse();\n          const indexOfOperator = reversedValueArr.findIndex(x => Number.isInteger(Number.parseInt(x)));\n\n          if (indexOfOperator > -1) {\n            // 0 1 2 3 4 5\n            // 5 4 3 2 1 0\n            // 4\n            // 1\n            // 6 - (1 + 1)\n            // \n            lastIndex = prevValue.length - indexOfOperator;\n          }\n\n          const newInput = prevValue.substring(0, lastIndex) + value;\n          return newInput;\n        } else {\n          return prevValue + value;\n        }\n      });\n    } else if (Utils.isEqualOperator(value)) {\n      let validInput = input;\n      const isLastInputIsMathOperator = Utils.isMathOperator(input[input.length - 1]);\n\n      if (isLastInputIsMathOperator) {\n        validInput = input.substring(0, input.length - 1);\n        setInput(validInput);\n      }\n\n      if (Utils.isDecimal(validInput[validInput.length - 1])) {\n        validInput = validInput.slice() + '0';\n      }\n\n      const res = Utils.calculate(validInput);\n      setResults(prev => prev.concat([validInput + \"=\" + res]));\n      setDisplayValue(res);\n      setisLastEqual(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayPanel, {\n      input: input,\n      results: results,\n      displayValue: displayValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputPanel, {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calculator, \"z0KVcD+mIzhaf2aWSfzYpaFMkPM=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["D:/Personal/projects/freecodecamps/front-end-libraries-projects/build-a-javascript-calculator/src/component/Calculator/Calculator.tsx"],"names":["useEffect","useRef","useState","Utils","DisplayPanel","InputPanel","Calculator","results","setResults","input","setInput","displayValue","setDisplayValue","prevResult","isLastEqual","setisLastEqual","current","length","split","handleClick","value","isCancel","isNumber","prev","isDecimal","hasNoOperatorOrDecimal","MATH_OPERATORS","some","x","includes","lastIndexOfOperator","Math","max","map","lastIndexOf","lastIndexOfDecimal","isMathOperator","prevValue","isPreviousAlsoMathOperator","isSubtractOperator","lastIndex","reversedValueArr","reverse","indexOfOperator","findIndex","Number","isInteger","parseInt","newInput","substring","isEqualOperator","validInput","isLastInputIsMathOperator","slice","res","calculate","concat"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Utils } from \"../../shared/Utils\";\r\nimport \"./Calculator.css\";\r\nimport DisplayPanel from \"./DisplayPanel/DisplayPanel\";\r\nimport InputPanel from \"./InputPanel/InputPanel\";\r\n\r\nconst Calculator: React.FC = () => {\r\n  const [results, setResults] = useState<string[]>([]);\r\n  const [input, setInput] = useState(\"0\");\r\n  const [displayValue, setDisplayValue] = useState('');\r\n  const prevResult = useRef('');\r\n  const [isLastEqual, setisLastEqual] = useState(false);\r\n  useEffect(() => {\r\n    prevResult.current = results.length ? results[results.length - 1].split(\"=\")[1] : '0';\r\n    setInput(prevResult.current);\r\n  }, [results]);\r\n\r\n  useEffect(() => {\r\n    if (!isLastEqual) {\r\n      setDisplayValue(input);\r\n    }\r\n    isLastEqual && setisLastEqual(false);\r\n  }, [input, isLastEqual, setisLastEqual])\r\n\r\n  const handleClick = (value: string) => {\r\n    if (Utils.isCancel(value)) {\r\n      setInput(\"0\");\r\n      setResults([]);\r\n    } else if (Utils.isNumber(value)) {\r\n      setInput((prev) =>\r\n        prev.length === 1 && prev === \"0\" ? value : prev + value\r\n      );\r\n    } else if (\r\n      Utils.isDecimal(value)\r\n    ) {\r\n      const hasNoOperatorOrDecimal = (!Utils.MATH_OPERATORS.some((x) => input.includes(x)) && !input.includes(\".\"));\r\n\r\n      if (hasNoOperatorOrDecimal) {\r\n        setInput((prev) => prev + value);\r\n        return;\r\n      }\r\n\r\n      const lastIndexOfOperator = Math.max(...Utils.MATH_OPERATORS.map(x => input.lastIndexOf(x)));\r\n      const lastIndexOfDecimal = input.lastIndexOf(\".\");\r\n      if ((lastIndexOfDecimal < lastIndexOfOperator)) {\r\n        setInput((prev) => prev + value);\r\n        return;\r\n      }\r\n    } else if (Utils.isMathOperator(value)) {\r\n      setInput((prevValue) => {\r\n        const isPreviousAlsoMathOperator = Utils.isMathOperator(\r\n          prevValue[prevValue.length - 1]\r\n        );\r\n\r\n        const isSubtractOperator = value === \"-\";\r\n        if (isPreviousAlsoMathOperator && !isSubtractOperator) {\r\n          let lastIndex = prevValue.length - 1;\r\n          const reversedValueArr = prevValue.split('').reverse();\r\n          const indexOfOperator = reversedValueArr.findIndex(x => Number.isInteger(Number.parseInt(x)));\r\n          \r\n          if (indexOfOperator > -1) {\r\n            // 0 1 2 3 4 5\r\n            // 5 4 3 2 1 0\r\n            // 4\r\n            // 1\r\n            // 6 - (1 + 1)\r\n            // \r\n            \r\n            lastIndex = prevValue.length - indexOfOperator;\r\n          }\r\n\r\n          const newInput = prevValue.substring(0, lastIndex) + value;\r\n          return newInput;\r\n        } else {\r\n          return prevValue + value;\r\n        }\r\n      });\r\n    } else if (Utils.isEqualOperator(value)) {\r\n      let validInput = input;\r\n      const isLastInputIsMathOperator = Utils.isMathOperator(\r\n        input[input.length - 1]\r\n      );\r\n      \r\n      if (isLastInputIsMathOperator) {\r\n        validInput = input.substring(0, input.length - 1);\r\n        setInput(validInput);\r\n      }\r\n\r\n      if (Utils.isDecimal(validInput[validInput.length - 1])) {\r\n        validInput = validInput.slice() + '0';\r\n      }\r\n\r\n      const res = Utils.calculate(validInput);\r\n      setResults(prev => prev.concat([validInput + \"=\" + res]));\r\n      setDisplayValue(res);\r\n      setisLastEqual(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <DisplayPanel input={input} results={results} displayValue={displayValue} />\r\n      <InputPanel onClick={handleClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n"]},"metadata":{},"sourceType":"module"}