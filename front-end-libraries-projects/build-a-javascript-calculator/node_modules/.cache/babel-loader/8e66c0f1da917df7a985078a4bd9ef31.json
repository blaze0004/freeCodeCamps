{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal\\\\projects\\\\freecodecamps\\\\front-end-libraries-projects\\\\build-a-javascript-calculator\\\\src\\\\component\\\\Calculator\\\\Calculator.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './Calculator.css';\nimport DisplayPanel from './DisplayPanel/DisplayPanel';\nimport InputPanel from './InputPanel/InputPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  const [resultHistory, setResultHistory] = useState(0);\n  const [result, setResult] = useState('');\n  const [input, setInput] = useState('0');\n\n  const handleClick = value => {\n    if (!(input.includes('.') && isDecimal(value)) && isNumber(value) || isDecimal(value) || isNumber(input)) {\n      setInput(prev => prev + value);\n    } else if (input === '0') {\n      setInput(value);\n    } else if (isMathOperator(value)) {\n      const ans = applyOperator(value);\n    } else if (isEqualOperator(value)) {\n      const ans = calculate();\n      setResult(prev => `${prev}=${ans}`);\n    } else if (isCancel(value)) {\n      setInput('0');\n      setResult('');\n    }\n  };\n\n  const isNumber = value => !Number.isNaN(value);\n\n  const isDecimal = value => value === '.';\n\n  const isMathOperator = value => ['+', '-', '/', '*'].includes(value);\n\n  const isEqualOperator = value => value === '=';\n\n  const isCancel = value => value === 'AC';\n\n  const calculate = () => {\n    return eval(result);\n  };\n\n  const applyOperator = operator => {\n    if (isNumber(result)) {\n      setResult(prev => `${result}${operator}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayPanel, {\n      input: input,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(InputPanel, {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Calculator, \"El6ltHpokaEA/8qepOiQKxQA76Q=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["D:/Personal/projects/freecodecamps/front-end-libraries-projects/build-a-javascript-calculator/src/component/Calculator/Calculator.tsx"],"names":["useState","DisplayPanel","InputPanel","Calculator","resultHistory","setResultHistory","result","setResult","input","setInput","handleClick","value","includes","isDecimal","isNumber","prev","isMathOperator","ans","applyOperator","isEqualOperator","calculate","isCancel","Number","isNaN","eval","operator"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,kBAAP;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,GAAD,CAAlC;;AAEA,QAAMU,WAAW,GAAIC,KAAD,IAAmB;AACnC,QAAI,EAAEH,KAAK,CAACI,QAAN,CAAe,GAAf,KAAuBC,SAAS,CAACF,KAAD,CAAlC,KAA8CG,QAAQ,CAACH,KAAD,CAAtD,IAAiEE,SAAS,CAACF,KAAD,CAA1E,IAAqFG,QAAQ,CAACN,KAAD,CAAjG,EAA0G;AACtGC,MAAAA,QAAQ,CAACM,IAAI,IAAIA,IAAI,GAAGJ,KAAhB,CAAR;AACH,KAFD,MAEO,IAAIH,KAAK,KAAK,GAAd,EAAmB;AACtBC,MAAAA,QAAQ,CAACE,KAAD,CAAR;AACH,KAFM,MAEA,IAAIK,cAAc,CAACL,KAAD,CAAlB,EAA2B;AAC9B,YAAMM,GAAG,GAAGC,aAAa,CAACP,KAAD,CAAzB;AACH,KAFM,MAEA,IAAIQ,eAAe,CAACR,KAAD,CAAnB,EAA4B;AAC/B,YAAMM,GAAG,GAAGG,SAAS,EAArB;AACAb,MAAAA,SAAS,CAACQ,IAAI,IAAK,GAAEA,IAAK,IAAGE,GAAI,EAAxB,CAAT;AACH,KAHM,MAGA,IAAII,QAAQ,CAACV,KAAD,CAAZ,EAAqB;AACxBF,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACAF,MAAAA,SAAS,CAAC,EAAD,CAAT;AACH;AACJ,GAdD;;AAgBA,QAAMO,QAAQ,GAAIH,KAAD,IAAmB,CAACW,MAAM,CAACC,KAAP,CAAaZ,KAAb,CAArC;;AACA,QAAME,SAAS,GAAIF,KAAD,IAAmBA,KAAK,KAAK,GAA/C;;AACA,QAAMK,cAAc,GAAIL,KAAD,IAAmB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBC,QAArB,CAA8BD,KAA9B,CAA1C;;AACA,QAAMQ,eAAe,GAAIR,KAAD,IAAmBA,KAAK,KAAK,GAArD;;AACA,QAAMU,QAAQ,GAAIV,KAAD,IAAmBA,KAAK,KAAK,IAA9C;;AAEA,QAAMS,SAAS,GAAG,MAAM;AACpB,WAAOI,IAAI,CAAClB,MAAD,CAAX;AACH,GAFD;;AAIA,QAAMY,aAAa,GAAIO,QAAD,IAAsB;AACxC,QAAIX,QAAQ,CAACR,MAAD,CAAZ,EAAsB;AAClBC,MAAAA,SAAS,CAACQ,IAAI,IAAK,GAAET,MAAO,GAAEmB,QAAS,EAA9B,CAAT;AACH;AACJ,GAJD;;AAMA,sBAAO;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACH,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEjB,KAArB;AAA4B,MAAA,MAAM,EAAEF;AAApC;AAAA;AAAA;AAAA;AAAA,YADG,eAEH,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEI;AAArB;AAAA;AAAA;AAAA;AAAA,YAFG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,CAzCD;;GAAMP,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["import { useState } from 'react';\r\nimport './Calculator.css';\r\nimport DisplayPanel from './DisplayPanel/DisplayPanel';\r\nimport InputPanel from './InputPanel/InputPanel';\r\n\r\nconst Calculator: React.FC = () => {\r\n    const [resultHistory, setResultHistory] = useState(0);\r\n    const [result, setResult] = useState('');\r\n    const [input, setInput] = useState('0');\r\n\r\n    const handleClick = (value: string) => {\r\n        if (!(input.includes('.') && isDecimal(value)) && isNumber(value) || isDecimal(value) || isNumber(input)) {\r\n            setInput(prev => prev + value);\r\n        } else if (input === '0') {\r\n            setInput(value);\r\n        } else if (isMathOperator(value)) {\r\n            const ans = applyOperator(value);\r\n        } else if (isEqualOperator(value)) {\r\n            const ans = calculate()\r\n            setResult(prev => `${prev}=${ans}`);\r\n        } else if (isCancel(value)) {\r\n            setInput('0');\r\n            setResult('');\r\n        }\r\n    }\r\n\r\n    const isNumber = (value: string) => !Number.isNaN(value);\r\n    const isDecimal = (value: string) => value === '.';\r\n    const isMathOperator = (value: string) => ['+', '-', '/', '*'].includes(value);\r\n    const isEqualOperator = (value: string) => value === '=';\r\n    const isCancel = (value: string) => value === 'AC';\r\n\r\n    const calculate = () => {\r\n        return eval(result);\r\n    }\r\n\r\n    const applyOperator = (operator: string) => {\r\n        if (isNumber(result)) {\r\n            setResult(prev => `${result}${operator}`);\r\n        }\r\n    }\r\n\r\n    return <div className='calculator'>\r\n        <DisplayPanel input={input} result={result} />\r\n        <InputPanel onClick={handleClick} />\r\n    </div>\r\n}\r\n\r\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}