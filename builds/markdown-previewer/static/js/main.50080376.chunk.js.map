{"version":3,"sources":["component/Tab.tsx","component/Editor.tsx","component/Preview.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tab","props","icon","title","width","onZoom","useState","isZoomed","setIsZoomed","useEffect","style","display","flexDirection","padding","justifyContent","backgroundColor","border","color","fontFamily","onClick","prev","cursor","children","Editor","onChange","markdown","name","id","value","e","target","Preview","fontSize","height","overflow","dangerouslySetInnerHTML","__html","marked","breaks","initialWidth","editor","preview","App","setMarkdown","setWidth","handleOnZoom","type","newWidth","className","fontWeight","Object","values","every","x","textDecoration","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50080376.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst Tab: React.FC<{\r\n  icon: string;\r\n  title: string;\r\n  width?: string | number;\r\n  onZoom: (isZoomed: boolean) => void;\r\n}> = (props) => {\r\n  const { icon, title, width, onZoom } = props;\r\n  const [isZoomed, setIsZoomed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    onZoom(isZoomed);\r\n  }, [isZoomed])\r\n  return (\r\n    <div\r\n      style={{ display: \"flex\", flexDirection: \"column\", width: width ?? '40vw', padding: 5 }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          backgroundColor: \"lightslategray\",\r\n          border: \"1px solid black\",\r\n          padding: 2,\r\n          color: \"white\"\r\n        }}\r\n      >\r\n        <div>\r\n          <span>{icon}</span>\r\n          <span style={{ fontFamily: 'cursive'}}>{title}</span>\r\n        </div>\r\n        <div onClick={() => setIsZoomed(prev => !prev)} style={{ cursor: 'pointer'}}>{ isZoomed ? 'üîç' : 'üîé'}</div>\r\n      </div>\r\n      <div>{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tab;\r\n","import Tab from \"./Tab\";\r\n\r\nconst Editor: React.FC<{\r\n  onChange: (value: string) => void;\r\n  markdown: string;\r\n  width: string | number;\r\n  onZoom: (isZoomed: boolean) => void;\r\n}> = (props) => {\r\n  const { onChange, markdown, width, onZoom } = props;\r\n\r\n  return (\r\n    <Tab icon=\"üìù\" title=\"Editor\" width={width} onZoom={onZoom}>\r\n      <textarea\r\n        name=\"markdown\"\r\n        id=\"editor\"\r\n        value={markdown}\r\n        style={{\r\n          display: \"flex\",\r\n          padding: '1rem'\r\n        }}\r\n        onChange={(e) => onChange(e.target.value)}\r\n      ></textarea>\r\n    </Tab>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import Tab from \"./Tab\";\r\nimport marked from \"marked\";\r\n\r\nconst Preview: React.FC<{\r\n  markdown: string;\r\n  width: string | number;\r\n  onZoom: (isZoomed: boolean) => void;\r\n}> = (props) => {\r\n  const { markdown, width, onZoom } = props;\r\n  return (\r\n    <Tab icon=\"üìí\" title=\"Preview\" width={width} onZoom={onZoom}>\r\n      <div\r\n        style={{\r\n          fontSize: \".8rem\",\r\n          width: \"100%\",\r\n          height: \"100vh\",\r\n          overflow: \"auto\",\r\n          backgroundColor: \"lavender\" \r\n        }}\r\n      >\r\n        <div\r\n          id=\"preview\"\r\n          style={{ padding: \"0 1rem\" }}\r\n          dangerouslySetInnerHTML={{\r\n            __html: marked(markdown, {\r\n              breaks: true,\r\n            }),\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </Tab>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Editor from \"./component/Editor\";\r\nimport Preview from \"./component/Preview\";\r\n\r\nconst initialMarkdown = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`;\r\n\r\nconst initialWidth = {\r\n  editor: \"40vw\",\r\n  preview: \"40vw\",\r\n};\r\n\r\nfunction App() {\r\n  const [markdown, setMarkdown] = useState<string>(initialMarkdown);\r\n  const [width, setWidth] =\r\n    useState<{ editor: string | number; preview: string | number }>(\r\n      initialWidth\r\n    );\r\n  const handleOnChange = (value: string) => {\r\n    setMarkdown(value);\r\n  };\r\n\r\n  const handleOnZoom = (isZoomed: boolean, type: \"editor\" | \"preview\") => {\r\n    const newWidth = isZoomed ? { ...width } : { ...initialWidth };\r\n    if (isZoomed) {\r\n      switch (type) {\r\n        case \"editor\":\r\n          newWidth.editor = \"95vw\";\r\n          newWidth.preview = 0;\r\n          break;\r\n        case \"preview\":\r\n          newWidth.editor = 0;\r\n          newWidth.preview = \"95vw\";\r\n          break;\r\n      }\r\n    }\r\n\r\n    setWidth(newWidth);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header\r\n        style={{\r\n          padding: 2,\r\n          fontSize: 18,\r\n          fontWeight: \"bold\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          fontFamily: \"cursive\",\r\n          width: Object.values(width).every((x) => x) ? \"80vw\" : \"95vw\",\r\n        }}\r\n      >\r\n        <span>Markdown Previewer</span>\r\n        <span>\r\n          <a\r\n            style={{ color: \"black\", textDecoration: \"none\" }}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href=\"https://github.com/blaze0004/freeCodeCamps\"\r\n          >\r\n            GitHub | @Blaze0004\r\n          </a>\r\n        </span>\r\n      </header>\r\n      <main\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {width.editor ? (\r\n          <Editor\r\n            onChange={handleOnChange}\r\n            markdown={markdown}\r\n            onZoom={(isZoomed) => handleOnZoom(isZoomed, \"editor\")}\r\n            width={width.editor}\r\n          />\r\n        ) : null}\r\n        {width.preview ? (\r\n          <Preview\r\n            markdown={markdown}\r\n            onZoom={(isZoomed) => handleOnZoom(isZoomed, \"preview\")}\r\n            width={width.preview}\r\n          />\r\n        ) : null}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}