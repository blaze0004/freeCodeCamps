{"version":3,"sources":["component/DrumPad.tsx","component/SwitchInput/SwitchInput.tsx","component/DrumMachine.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DrumPad","props","id","keyTrigger","url","volume","isPowerOn","onComplete","onPlay","useState","showHoverEffect","setShowHoverEffect","playSound","useCallback","a","replace","audio","document","getElementById","play","catch","e","pause","setTimeout","useEffect","eventHandler","ev","key","toLowerCase","toUpperCase","window","addEventListener","removeEventListener","className","onClick","src","onEnded","SwitchInput","onChange","name","label","checked","type","htmlFor","DrumMachine","currentTrackName","setCurrentTrackName","setVolume","status","showStatus","setIsPowerOn","handleOnPlay","_","prev","min","max","value","Number","parseInt","target","trackData","map","x","rel","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8896ad7c.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport './DrumPad.css';\r\n\r\nconst DrumPad: React.FC<{\r\n    keyTrigger: string;\r\n    id: string;\r\n    url: string;\r\n    volume: number;\r\n    isPowerOn: boolean;\r\n    onPlay: (keyTrigger: string) => void;\r\n    onComplete: () => void;\r\n}> = (props) => {\r\n    const { id, keyTrigger, url, volume, isPowerOn, onComplete, onPlay } = props;\r\n    const [showHoverEffect, setShowHoverEffect] = useState(false);\r\n\r\n    const playSound = useCallback(async () => {\r\n        if (isPowerOn) {\r\n            onPlay(id.replace(/-/g, ' '));\r\n            setShowHoverEffect(true);\r\n            const audio = document.getElementById(keyTrigger) as HTMLAudioElement;\r\n            await audio.play().catch((e) => audio.pause());\r\n            setTimeout(() => {\r\n                setShowHoverEffect(false);\r\n            }, 250)\r\n        }\r\n    }, [isPowerOn, keyTrigger, onPlay, id]);\r\n\r\n    useEffect(() => {\r\n        const eventHandler = (ev: KeyboardEvent) => {\r\n            if (ev.key === keyTrigger.toLowerCase() || ev.key === keyTrigger.toUpperCase()) {\r\n                playSound();\r\n            }\r\n        };\r\n        window.addEventListener('keypress', eventHandler);\r\n\r\n        return () => {\r\n            window.removeEventListener('keypress', eventHandler);\r\n        };\r\n    }, [keyTrigger, playSound]);\r\n\r\n    useEffect(() => {\r\n        const audio = document.getElementById(keyTrigger) as HTMLAudioElement;\r\n        audio.volume = volume;\r\n    }, [volume, keyTrigger]);\r\n\r\n    return (\r\n        <div id={id} className={`drum-pad ${showHoverEffect ? 'hover' : ''}`} onClick={playSound}>\r\n            <audio className='clip' src={url} id={keyTrigger} onEnded={() => { onComplete(); setShowHoverEffect(false); }} />\r\n            <span className='drum-pad-text'>{keyTrigger}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DrumPad;\r\n","import React from 'react';\r\nimport './SwitchInput.css';\r\n\r\nconst SwitchInput: React.FC<{\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    label: string;\r\n    checked: boolean;\r\n}> = (props) => {\r\n    const { onChange, name, label, checked } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div>{label}</div>\r\n            <div>\r\n                <input\r\n                    type='checkbox'\r\n                    className='switchInput'\r\n                    id={name}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    checked={checked}\r\n                />\r\n                <label className='switchInputLabel' htmlFor={name}></label>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SwitchInput;\r\n","import React, { useState } from 'react';\r\nimport DrumPad from './DrumPad';\r\nimport SwitchInput from './SwitchInput/SwitchInput';\r\nimport trackData from './../assets/master_data/tracks-data.json';\r\nimport './DrumMachine.css';\r\n\r\ntype Tracks = 'smoothPianoKit' | 'heaterKit';\r\n\r\nconst DrumMachine: React.FC = () => {\r\n    const [currentTrackName, setCurrentTrackName] = useState<Tracks>('smoothPianoKit');\r\n    const [volume, setVolume] = useState<number>(1);\r\n    const [status, showStatus] = useState<string>('DrumMachine');\r\n    const [isPowerOn, setIsPowerOn] = useState<boolean>(true);\r\n\r\n    const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = Number.parseInt(e.target.value);\r\n        setVolume(value / 100);\r\n        showStatus(`Volume: ${value}`);\r\n    };\r\n\r\n    const handlePowerChange = (_: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsPowerOn((prev) => !prev);\r\n        showStatus(`Power: ${!isPowerOn ? 'On' : 'Off'}`);\r\n    };\r\n\r\n    const handleTrackChange = (_: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentTrackName((prev) => (prev === 'heaterKit' ? 'smoothPianoKit' : 'heaterKit'));\r\n        showStatus(`Track: ${currentTrackName === 'heaterKit' ? 'Smooth Piano Kit' : 'Heater Kit'}`);\r\n    };\r\n\r\n    const handleOnPlay = (keyTrigger: string) => {\r\n        showStatus(keyTrigger);\r\n    };\r\n\r\n    const resetStatusMessage = () => {\r\n        setTimeout(() => {\r\n            showStatus('DrumMachine');\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <div id='drum-machine' className='drum-machine-root'>\r\n            <div className='drum-machine-header'>\r\n                <div className='drum-machine-switches'>\r\n                    <SwitchInput name='power' label='Power' checked={isPowerOn} onChange={handlePowerChange} />\r\n                    <SwitchInput name='soundTrack' label='SoundTrack' checked={currentTrackName === 'smoothPianoKit'} onChange={handleTrackChange} />\r\n                </div>\r\n                <div className='drum-machine-volume'>\r\n                    <label htmlFor='volume'>Volume</label>\r\n                    <input type='range' min={0} max={100} name='volume' value={volume * 100} onChange={handleVolumeChange} />\r\n                </div>\r\n            </div>\r\n            <div className='drum-machine-pads'>\r\n                {trackData[currentTrackName]\r\n                    .map((x) => ({ ...x, volume, isPowerOn }))\r\n                    .map((x) => (\r\n                        <DrumPad {...x} key={x.id} onPlay={handleOnPlay} onComplete={() => resetStatusMessage()} />\r\n                    ))}\r\n            </div>\r\n            <div className='drum-machine-footer'>\r\n                <span id='display' className='drum-machine-status'>\r\n                    <strong>\r\n                        {status}\r\n                    </strong>\r\n                </span>\r\n                <span className='drum-machine-link'>\r\n                    <a target='_blank' rel='noreferrer' href='https://github.com/blaze0004/freeCodeCamps'>\r\n                        GitHub | @Blaze0004\r\n                    </a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DrumMachine;\r\n","import './App.css';\r\nimport DrumMachine from './component/DrumMachine';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DrumMachine />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}