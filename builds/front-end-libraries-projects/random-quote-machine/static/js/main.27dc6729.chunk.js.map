{"version":3,"sources":["component/Button.tsx","component/Quote.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","text","bgColor","buttonProps","style","backgroundColor","borderRadius","color","padding","border","Quote","quote","author","onNext","id","display","flexDirection","width","textAlign","fontSize","fontWeight","fontFamily","marginBottom","justifyContent","marginTop","href","target","rel","textDecoration","icon","faShare","size","onClick","quotesPath","process","REACT_APP_QUOTE_PATH","getRandomColor","min","r","Math","random","b","g","getRandomQuote","quotes","length","randomIndex","floor","randomQuote","App","useState","setQuote","setQuotes","useEffect","fetch","then","data","json","setRandomQuote","catch","err","console","log","quotesData","randomColor","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27dc6729.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes } from 'react';\r\n\r\ninterface IButton extends ButtonHTMLAttributes<any> {\r\n    text: string,\r\n    bgColor: string,\r\n}\r\nconst Button: React.FC<IButton> = (props) => {\r\n    const {text, bgColor, ...buttonProps} = props;\r\n    return <button style={{\r\n        backgroundColor: bgColor,\r\n        borderRadius: 8,\r\n        color: 'white',\r\n        padding: '4px 8px',\r\n        border: 'none'\r\n    }} {...buttonProps}>{text}</button> \r\n}\r\n\r\nexport default Button;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faShare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"./Button\";\r\n\r\nconst Quote: React.FC<{\r\n  quote: string;\r\n  author: string;\r\n  color: string;\r\n  onNext: () => void;\r\n}> = (props) => {\r\n  const { quote, author, color, onNext } = props;\r\n\r\n  return (\r\n    <div\r\n      id=\"quote-box\"\r\n      style={{\r\n        padding: 20,\r\n        backgroundColor: \"white\",\r\n        borderRadius: 8,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        width: \"40vw\",\r\n      }}\r\n    >\r\n      <div\r\n        id=\"text\"\r\n        style={{\r\n          textAlign: \"center\",\r\n          color: color,\r\n          fontSize: 18,\r\n          fontWeight: 500,\r\n          fontFamily: \"cursive\",\r\n          marginBottom: 20,\r\n        }}\r\n      >\r\n        <q>{quote}</q>\r\n      </div>\r\n      <div\r\n        id=\"author\"\r\n        style={{\r\n          textAlign: \"right\",\r\n          color: color,\r\n        }}\r\n      >\r\n        -- {author}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          marginTop: 20,\r\n        }}\r\n      >\r\n        <div>\r\n          <div\r\n            style={{\r\n              padding: \"2px 8px\",\r\n              borderRadius: 8,\r\n              backgroundColor: color,\r\n            }}\r\n          >\r\n            <a\r\n              href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${quote}`}\r\n              target=\"_blank\"\r\n              id=\"tweet-quote\"\r\n              rel='noreferrer'\r\n              style={{ color: \"white\", textDecoration: \"none\" }}\r\n            >\r\n              Tweet <FontAwesomeIcon icon={faShare} size=\"1x\" color=\"white\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div id=\"new-quote\">\r\n          <Button bgColor={color} onClick={onNext} text=\"New quote\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Quote from \"./component/Quote\";\r\n\r\nconst quotesPath =\r\n  process.env.REACT_APP_QUOTE_PATH ??\r\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n\r\nconst getRandomColor = () => {\r\n  const min = 50;\r\n  const max = 180;\r\n  const r = Math.random() * (max - min + 1) + min;\r\n  const b = Math.random() * (max - min + 1) + min;\r\n  const g = Math.random() * (max - min + 1) + min;\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n};\r\n\r\nconst getRandomQuote = (quotes: [] = []) => {\r\n  if (quotes.length) {\r\n    const randomIndex = Math.floor(Math.random() * quotes.length);\r\n    const randomQuote = quotes[randomIndex];\r\n    return randomQuote;\r\n  }\r\n  return { quote: \"\", author: \"\" };\r\n};\r\n\r\nconst App = () => {\r\n  const [quote, setQuote] = useState<{\r\n    author: string;\r\n    quote: string;\r\n    color: string;\r\n  }>({\r\n    quote: \"\",\r\n    author: \"\",\r\n    color: \"green\",\r\n  });\r\n  const [quotes, setQuotes] = useState<any>([]);\r\n\r\n  useEffect(() => {\r\n    fetch(quotesPath)\r\n      .then((data) => data.json())\r\n      .then(({ quotes }) => {\r\n        setQuotes(quotes);\r\n        setRandomQuote(quotes);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const setRandomQuote = (quotesData: [] | null = null) => {\r\n    const randomColor = getRandomColor();\r\n    const { quote, author } = getRandomQuote(quotesData ?? quotes);\r\n    setQuote({\r\n      quote,\r\n      author,\r\n      color: randomColor,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ backgroundColor: quote.color }}>\r\n      {quote.quote ? (\r\n        <>\r\n          <Quote\r\n            author={quote.author}\r\n            quote={quote.quote}\r\n            color={quote.color}\r\n            onNext={() => setRandomQuote()}\r\n          />\r\n          <span style={{ textAlign: \"center\", marginTop: 12 }}>\r\n            <a\r\n              style={{ color: \"white\", textDecoration: \"none\" }}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              href=\"https://github.com/blaze0004/freeCodeCamps\"\r\n            >\r\n              GitHub | @Blaze0004\r\n            </a>\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <div>loading...</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}