{"version":3,"sources":["hooks/useAudioPlayer.tsx","hooks/useLength.tsx","hooks/useTimer.tsx","hooks/usePomodoroClock.tsx","PomodoroClock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["interval","useAudioPlayer","useState","isPlaying","setIsPlaying","useEffect","audioEl","document","getElementById","loop","src","play","then","setTimeout","catch","e","console","log","clearInterval","useLength","defaultValue","isNotValid","useCallback","a","useReducer","state","action","useTimer","defaultTime","timer","setTimer","type","payload","timerState","setTimerState","setInterval","prev","usePomodoroClock","mode","setMode","prevMode","value","ref","useRef","current","usePrevious","breakLength","setBreakLength","sessionLength","setSessionLength","setIsPlayingAudio","playPause","reset","manageLength","selectedMode","isIncrement","PomodoroClock","pomodoraClock","startTime","setStartTime","timeString","useMemo","numbers","i","Number","isInteger","className","id","minutes","Math","floor","time","toFixed","replace","getTimerTime","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.67927bae.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nlet interval: NodeJS.Timeout;\r\nconst useAudioPlayer = (): [Dispatch<SetStateAction<boolean>>] => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const audioEl = document.getElementById(\"beep\") as HTMLAudioElement;\r\n    if (!audioEl) {\r\n      return;\r\n    }\r\n\r\n    if (isPlaying) {\r\n      audioEl.loop = true;\r\n      audioEl.src = \"/assets/beep.wav\";\r\n      audioEl\r\n        .play()\r\n        .then(() => {\r\n          interval = setTimeout(() => {\r\n            setIsPlaying(false);\r\n          }, 2000);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    } else {\r\n      audioEl.src = \"\";\r\n      audioEl.loop = false;\r\n    }\r\n\r\n    return () => {\r\n      !!interval && clearInterval(interval);\r\n    };\r\n  }, [isPlaying]);\r\n\r\n  return [setIsPlaying];\r\n};\r\n\r\nexport default useAudioPlayer;\r\n","import { Dispatch, useCallback, useReducer } from \"react\";\r\n\r\nconst MAX_LENGTH_IN_SECONDS = 3600; // 60 minutes\r\nconst useLength = (defaultValue: number): [number, Dispatch<ActionType>] => {\r\n  const isNotValid = useCallback(\r\n    (a: number) => a > MAX_LENGTH_IN_SECONDS || a <= 0,\r\n    []\r\n  );\r\n\r\n  const [value, dispatch] = useReducer((state: number, action: ActionType) => {\r\n    switch (action) {\r\n      case \"increment\":\r\n        return isNotValid(state + 60) ? state : state + 60;\r\n      case \"decrement\":\r\n        return isNotValid(state - 60) ? state : state - 60;\r\n      case \"reset\":\r\n        return defaultValue;\r\n      default:\r\n        return state;\r\n    }\r\n  }, defaultValue);\r\n\r\n  return [value, dispatch];\r\n};\r\n\r\ntype ActionType = \"increment\" | \"decrement\" | \"reset\";\r\nexport default useLength;\r\n","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nlet interval: NodeJS.Timeout | null = null;\r\n\r\nconst useTimer = (defaultTime: number): [number, TimerStateType, Dispatch<SetStateAction<number>>, Dispatch<SetStateAction<TUseTimerAction>>] => {\r\n    const [timer, setTimer] = useState(defaultTime);\r\n    const [timerState, setTimerState] = useState<TUseTimerAction>({\r\n        type: 'reset',\r\n        payload: defaultTime\r\n    });\r\n    \r\n    useEffect(() => {\r\n        switch(timerState.type) {\r\n            case 'play': {\r\n                interval = setInterval(() => {\r\n                    setTimer(prev => prev - 1);\r\n                }, 1000);\r\n                break;\r\n            }\r\n            case 'pause':\r\n                interval !== null && clearInterval(interval);\r\n                break;\r\n            case 'reset':\r\n                interval !== null && clearInterval(interval);\r\n                setTimer(timerState.payload ?? defaultTime);\r\n                break;\r\n            case 'resetAndPlay':\r\n                interval !== null && clearInterval(interval);\r\n                setTimer(timerState.payload ?? defaultTime);\r\n                setTimerState({ type: 'play' });\r\n                break;\r\n        }\r\n\r\n        return () => {\r\n            if (timerState.type === 'play') {\r\n                interval && clearInterval(interval);\r\n            }\r\n        }\r\n    }, [timerState, defaultTime])\r\n\r\n    return [timer, timerState.type, setTimer, setTimerState]\r\n}\r\n\r\nexport type TimerStateType = 'play' | 'pause' | 'reset' | 'resetAndPlay';\r\n\r\ntype TUseTimerAction = {\r\n    type: TimerStateType;\r\n    payload?: number;\r\n};\r\n\r\nexport default useTimer;","import { useEffect, useRef, useState } from \"react\";\r\nimport useAudioPlayer from \"./useAudioPlayer\";\r\nimport useLength from \"./useLength\";\r\nimport useTimer, { TimerStateType } from \"./useTimer\";\r\n\r\nconst DEFAULT_BREAK_Length: number = 300;\r\nconst DEFAULT_SESSION_Length: number = 1500;\r\n\r\nfunction usePrevious<T>(value: T) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef<T>();\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n\r\nexport const usePomodoroClock = (): IPomodoraClock => {\r\n  const [mode, setMode] = useState<'session' | 'break'>('session');\r\n  const prevMode = usePrevious(mode);\r\n  const [breakLength, setBreakLength] = useLength(DEFAULT_BREAK_Length);\r\n  const [timer, timerState, setTimer, setTimerState] = useTimer(DEFAULT_SESSION_Length);\r\n  const [sessionLength, setSessionLength] = useLength(DEFAULT_SESSION_Length);\r\n  const [setIsPlayingAudio] = useAudioPlayer();\r\n\r\n  const manageLength = (\r\n    selectedMode: TMode,\r\n    isIncrement: boolean = false\r\n  ) => {\r\n    const action = isIncrement ? 'increment' : 'decrement';\r\n    switch (selectedMode) {\r\n      case 'break':\r\n        setBreakLength(action);\r\n        break;\r\n      case 'session':\r\n        setSessionLength(action)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (timerState === 'reset') {\r\n      setTimer(sessionLength)\r\n    }\r\n  }, [sessionLength])\r\n\r\n  useEffect(() => {\r\n    if (prevMode !== mode) {\r\n      if (timerState === 'reset') {\r\n        return;\r\n      }\r\n      setIsPlayingAudio(true);\r\n      setTimeout(() => {\r\n        setTimerState({\r\n          type: 'resetAndPlay',\r\n          payload: mode === 'session' ? sessionLength : breakLength\r\n        });\r\n      }, 1000)\r\n    }\r\n  }, [mode])\r\n\r\n  useEffect(() => {\r\n    if (timer <= 0) {\r\n      setMode(prev => prev === 'break' ? 'session' : 'break');\r\n      setTimerState({ type: 'pause' });\r\n    }\r\n  }, [timer]);\r\n\r\n  const playPause = () => {\r\n    if (timerState === 'reset') {\r\n      setTimer(sessionLength);\r\n    }\r\n    \r\n    setTimerState({\r\n      type: timerState !==  'play' ? 'play' : 'pause'\r\n    })\r\n  };\r\n\r\n  const reset = () => {\r\n    setTimerState({ type: 'reset' });\r\n    setBreakLength('reset')\r\n    setSessionLength('reset');\r\n    setIsPlayingAudio(false);\r\n    setMode('session');\r\n  };\r\n\r\n  return {\r\n    breakLength,\r\n    sessionLength,\r\n    timer,\r\n    mode,\r\n    timerState,\r\n    playPause,\r\n    reset,\r\n    manageLength,\r\n  };\r\n};\r\n\r\ntype TMode = 'session' | 'break';\r\n\r\nexport interface IPomodoraClock {\r\n  breakLength: number;\r\n  sessionLength: number;\r\n  timer: number;\r\n  mode: TMode;\r\n  timerState: TimerStateType;\r\n  playPause: () => void;\r\n  reset: () => void;\r\n  manageLength: (type: TMode, isIncrement?: boolean) => void;\r\n}\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { usePomodoroClock } from \"./hooks/usePomodoroClock\";\r\nimport \"./Pomodoro.css\";\r\n\r\nconst PomodoroClock: React.FC = ({}) => {\r\n  const pomodoraClock = usePomodoroClock();\r\n\r\n  const getTimerTime = () => {\r\n    const minutes = Math.floor(pomodoraClock.timer / 60);\r\n    const seconds = Math.floor(pomodoraClock.timer - minutes * 60);\r\n    const time =\r\n      (minutes < 10 ? \"0\" : \"\") + (minutes + 0.01 * seconds).toFixed(2);\r\n    return `${time.replace(\".\", \":\")}`;\r\n  };\r\n\r\n  const [startTime, setStartTime] = useState<number>(0);\r\n  useEffect(() => {\r\n    setStartTime(pomodoraClock.timer);\r\n  }, [pomodoraClock.timer]);\r\n\r\n  const timeString = useMemo(() => {\r\n    let numbers = \"\";\r\n\r\n    for (let i = pomodoraClock.timer + 3600; i >= 0; i--) {\r\n      if (Number.isInteger(i / 60)) {\r\n        numbers += \"|\";\r\n      } else {\r\n        numbers += Number.isInteger(i / 10) ? \".\" : \"\";\r\n      }\r\n    }\r\n\r\n    return numbers;\r\n  }, [pomodoraClock.timer, startTime]);\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <div className=\"timer\">\r\n        <div>\r\n          <div id=\"timer-label\" className=\"timer-label cursive\">\r\n            {pomodoraClock.mode === \"break\" ? \"Break\" : \"Session\"}\r\n          </div>\r\n          <span id=\"time-left\" className=\"time-left cursive\">\r\n            {getTimerTime()}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <span className=\"time\">{timeString}</span>\r\n      <span className=\"seperator\"></span>\r\n      <span className=\"arrow\">&#11165;</span>\r\n      <span className=\"upper\"></span>\r\n      <span className=\"lower\"></span>\r\n      <div id=\"break\" className=\"cursive\">\r\n        <div id=\"break-label\">Break Length</div>\r\n        <div className=\"buttons\">\r\n          <button\r\n            id=\"break-decrement\"\r\n            onClick={() => pomodoraClock.manageLength(\"break\")}\r\n          >\r\n            <i className=\"fas fa-arrow-left\"></i>\r\n          </button>\r\n          <div id=\"break-length\">{pomodoraClock.breakLength / 60}</div>\r\n          <button\r\n            id=\"break-increment\"\r\n            onClick={() => pomodoraClock.manageLength(\"break\", true)}\r\n          >\r\n            <i className=\"fas fa-arrow-right\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div id=\"session\" className=\"cursive\">\r\n        <div id=\"session-label\">Session Length</div>\r\n        <div className=\"buttons\">\r\n          <button\r\n            id=\"session-decrement\"\r\n            onClick={() => pomodoraClock.manageLength(\"session\")}\r\n          >\r\n            <i className=\"fas fa-arrow-left\"></i>\r\n          </button>\r\n          <div id=\"session-length\">{pomodoraClock.sessionLength / 60}</div>\r\n          <button\r\n            id=\"session-increment\"\r\n            onClick={() => pomodoraClock.manageLength(\"session\", true)}\r\n          >\r\n            <i className=\"fas fa-arrow-right\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div id=\"timer\">\r\n        <div id=\"actions\" className=\"buttons\">\r\n          <button id=\"start_stop\" onClick={() => pomodoraClock.playPause()}>\r\n            {pomodoraClock.timerState !== 'play' ? <i className=\"fas fa-play\"></i> : <i className=\"fas fa-pause\"></i>}\r\n          </button>\r\n          <button id=\"reset\" onClick={() => pomodoraClock.reset()}>\r\n          <i className=\"fas fa-sync-alt\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PomodoroClock;\r\n","import \"./App.css\";\r\nimport PomodoroClock from \"./PomodoroClock\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\" id=\"pomodora-clock\">\r\n      <PomodoroClock />\r\n      <audio id=\"beep\" src=\"\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}