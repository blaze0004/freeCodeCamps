[
    {
        "title": "Introduction",
        "descriptions": [
            {
                "description": "\n        JavaScript is a cross-platform, object-oriented scripting language. It\n        is a small and lightweight language. Inside a host environment (for\n        example, a web browser), JavaScript can be connected to the objects of\n        its environment to provide programmatic control over them.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        JavaScript contains a standard library of objects, such as Array, Date,\n        and Math, and a core set of language elements such as operators, control\n        structures, and statements. Core JavaScript can be extended for a\n        variety of purposes by supplementing it with additional objects; for\n        example:\n      ",
                "listItems": [
                    "\n          Client-side JavaScript extends the core language by supplying objects\n          to control a browser and its Document Object Model (DOM). For example,\n          client-side extensions allow an application to place elements on an\n          HTML form and respond to user events such as mouse clicks, form input,\n          and page navigation.\n        ",
                    "\n          Server-side JavaScript extends the core language by supplying objects\n          relevant to running JavaScript on a server. For example, server-side\n          extensions allow an application to communicate with a database,\n          provide continuity of information from one invocation to another of\n          the application, or perform file manipulations on a server.\n        "
                ],
                "codeLines": []
            }
        ]
    },
    {
        "title": "What you should already know",
        "descriptions": [
            {
                "description": "This guide assumes you have the following basic background:",
                "listItems": [
                    "\n          A general understanding of the Internet and the World Wide Web (WWW).\n        ",
                    "Good working knowledge of HyperText Markup Language (HTML).",
                    "\n          Some programming experience. If you are new to programming, try one of\n          the tutorials linked on the main page about JavaScript.\n        "
                ],
                "codeLines": []
            }
        ]
    },
    {
        "title": "JavaScript and Java",
        "descriptions": [
            {
                "description": "\n        JavaScript and Java are similar in some ways but fundamentally different\n        in some others. The JavaScript language resembles Java but does not have\n        Java's static typing and strong type checking. JavaScript follows most\n        Java expression syntax, naming conventions and basic control-flow\n        constructs which was the reason why it was renamed from LiveScript to\n        JavaScript.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        In contrast to Java's compile-time system of classes built by\n        declarations, JavaScript supports a runtime system based on a small\n        number of data types representing numeric, Boolean, and string values.\n        JavaScript has a prototype-based object model instead of the more common\n        class-based object model. The prototype-based model provides dynamic\n        inheritance; that is, what is inherited can vary for individual objects.\n        JavaScript also supports functions without any special declarative\n        requirements. Functions can be properties of objects, executing as\n        loosely typed methods.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        JavaScript is a very free-form language compared to Java. You do not\n        have to declare all variables, classes, and methods. You do not have to\n        be concerned with whether methods are public, private, or protected, and\n        you do not have to implement interfaces. Variables, parameters, and\n        function return types are not explicitly typed.\n      ",
                "listItems": [],
                "codeLines": []
            }
        ]
    },
    {
        "title": "Hello world",
        "descriptions": []
    },
    {
        "title": "Variables",
        "descriptions": [
            {
                "description": "\n      You use variables as symbolic names for values in your application. The\n      names of variables, called identifiers, conform to certain rules.\n    ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n      A JavaScript identifier must start with a letter, underscore (_), or\n      dollar sign ($); subsequent characters can also be digits (0-9). Because\n      JavaScript is case sensitive, letters include the characters \"A\" through\n      \"Z\" (uppercase) and the characters \"a\" through \"z\" (lowercase).\n    ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n      You can use ISO 8859-1 or Unicode letters such as å and ü in identifiers.\n      You can also use the Unicode escape sequences as characters in\n      identifiers. Some examples of legal names are Number_hits, temp99, and\n      _name.\n    ",
                "listItems": [],
                "codeLines": []
            }
        ]
    },
    {
        "title": "Declaring variables",
        "descriptions": [
            {
                "description": "\n        With the keyword var. For example, <code>var x = 42.</code> This syntax\n        can be used to declare both local and global variables.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        By simply assigning it a value. For example, <code>x = 42.</code> This\n        always declares a global variable. It generates a strict JavaScript\n        warning. You shouldn't use this variant.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        With the keyword let. For example,<code> let y = 13.</code> This syntax\n        can be used to declare a block scope local variable. See Variable scope\n        below.\n      ",
                "listItems": [],
                "codeLines": [
                    "var x = 42."
                ]
            }
        ]
    },
    {
        "title": "Variable scope",
        "descriptions": [
            {
                "description": "\n        When you declare a variable outside of any function, it is called a\n        global variable, because it is available to any other code in the\n        current document. When you declare a variable within a function, it is\n        called a local variable, because it is available only within that\n        function.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        JavaScript before ECMAScript 2015 does not have block statement scope;\n        rather, a variable declared within a block is local to the function (or\n        global scope) that the block resides within. For example the following\n        code will log 5, because the scope of x is the function (or global\n        context) within which x is declared, not the block, which in this case\n        is an if statement.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        This behavior changes, when using the let declaration introduced in\n        ECMAScript 2015.\n      ",
                "listItems": [],
                "codeLines": [
                    "if (true) { var x = 5; } console.log(x); // 5"
                ]
            }
        ]
    },
    {
        "title": "Global variables",
        "descriptions": [
            {
                "description": "\n        Global variables are in fact properties of the global object. In web\n        pages the global object is window, so you can set and access global\n        variables using the window.variable syntax.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        Consequently, you can access global variables declared in one window or\n        frame from another window or frame by specifying the window or frame\n        name. For example, if a variable called phoneNumber is declared in a\n        document, you can refer to this variable from an iframe as\n        parent.phoneNumber.\n      ",
                "listItems": [],
                "codeLines": []
            }
        ]
    },
    {
        "title": "Constants",
        "descriptions": [
            {
                "description": "\n        You can create a read-only, named constant with the const keyword. The\n        syntax of a constant identifier is the same as for a variable\n        identifier: it must start with a letter, underscore or dollar sign and\n        can contain alphabetic, numeric, or underscore characters.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        A constant cannot change value through assignment or be re-declared\n        while the script is running. It has to be initialized to a value.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        The scope rules for constants are the same as those for let block scope\n        variables. If the const keyword is omitted, the identifier is assumed to\n        represent a variable.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        You cannot declare a constant with the same name as a function or\n        variable in the same scope. For example:\n      ",
                "listItems": [],
                "codeLines": [
                    "const PI = 3.14;"
                ]
            }
        ]
    },
    {
        "title": "Data types",
        "descriptions": [
            {
                "description": "The latest ECMAScript standard defines seven data types:",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "Six data types that are primitives:",
                "listItems": [
                    "\n          <p>Six data types that are primitives:</p>\n          <ul>\n            <li>Boolean. true and false.</li>\n            <li>\n              null. A special keyword denoting a null value. Because JavaScript\n              is case-sensitive, null is not the same as Null, NULL, or any\n              other variant.\n            </li>\n            <li>undefined. A top-level property whose value is undefined.</li>\n            <li>Number. 42 or 3.14159.</li>\n            <li>String. \"Howdy\"</li>\n            <li>\n              Symbol (new in ECMAScript 2015). A data type whose instances are\n              unique and immutable.\n            </li>\n          </ul>\n        ",
                    "Boolean. true and false.",
                    "\n              null. A special keyword denoting a null value. Because JavaScript\n              is case-sensitive, null is not the same as Null, NULL, or any\n              other variant.\n            ",
                    "undefined. A top-level property whose value is undefined.",
                    "Number. 42 or 3.14159.",
                    "String. \"Howdy\"",
                    "\n              Symbol (new in ECMAScript 2015). A data type whose instances are\n              unique and immutable.\n            ",
                    "and Object"
                ],
                "codeLines": []
            }
        ]
    },
    {
        "title": "if...else statement",
        "descriptions": [
            {
                "description": "\n        You may also compound the statements using else if to have multiple\n        conditions tested in sequence, as follows:\n      ",
                "listItems": [],
                "codeLines": [
                    "if (condition) { statement_1; } else { statement_2; }"
                ]
            }
        ]
    },
    {
        "title": "while statement",
        "descriptions": [
            {
                "description": "\n        The condition test occurs before statement in the loop is executed. If\n        the condition returns true, statement is executed and the condition is\n        tested again. If the condition returns false, execution stops and\n        control is passed to the statement following while.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        To execute multiple statements, use a block statement ({ ... }) to group\n        those statements.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "The following while loop iterates as long as n is less than three:",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        With each iteration, the loop increments n and adds that value to x.\n        Therefore, x and n take on the following values:\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        After completing the third pass, the condition n &lt; 3 is no longer\n        true, so the loop terminates.\n      ",
                "listItems": [
                    "After the first pass: n = 1 and x = 1",
                    "After the second pass: n = 2 and x = 3",
                    "After the third pass: n = 3 and x = 6"
                ],
                "codeLines": [
                    "while (condition) statement"
                ]
            }
        ]
    },
    {
        "title": "Function declarations",
        "descriptions": [
            {
                "description": "\n        For example, the following code defines a simple function named square:\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        The function square takes one argument, called number. The function\n        consists of one statement that says to return the argument of the\n        function (that is, number) multiplied by itself. The return statement\n        specifies the value returned by the function.\n      ",
                "listItems": [],
                "codeLines": []
            },
            {
                "description": "\n        Primitive parameters (such as a number) are passed to functions by\n        value; the value is passed to the function, but if the function changes\n        the value of the parameter, this change is not reflected globally or in\n        the calling function.\n      ",
                "listItems": [
                    "The name of the function.",
                    "\n          A list of arguments to the function, enclosed in parentheses and\n          separated by commas.\n        ",
                    "\n          The JavaScript statements that define the function, enclosed in curly\n          brackets, { }.\n        "
                ],
                "codeLines": [
                    "function square(number) { return number * number; }"
                ]
            }
        ]
    },
    {
        "title": "Reference",
        "descriptions": []
    }
]